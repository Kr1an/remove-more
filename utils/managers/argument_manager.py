"""Argument Manager Module.

Module Deal with parsing command line arguments and
generating options/paths variables for execution manager.

Example:
    argument_manager.parse_arguments()

"""
import argparse

from setting.DEFAULT_CONFIGS import ARGS_CONFIG


def parse_arguments():
    """Parse Arguments

    Function parse command line arguments.

    Returns:
        list: 2 values. First is 'paths'- positional argument. The second one
            is 'options' - generated by parsing optional args.
                      
    """
    arguments_parser = argparse.ArgumentParser()
    add_optional_arguments(arguments_parser)
    add_positional_arguments(arguments_parser)
    arguments = arguments_parser.parse_args()
    return [arguments.paths, _get_options(arguments)]


def _get_options(arguments):
    """Get Options Function
    
    Do not use this function outside of this module.

    Function get 'options' component from arguments
    'options' is describing how the programme should deal
    with given parameters.
    
    Attributes:
        arguments: row arg from command line parsed by argparse.

    Returns:
        value: 'options' object with description on how program should work.

    """
    options = {'mods':[]}
    conditions = [
        (arguments.binmove, ['binmove']),
        (arguments.bincopy, ['bincopy']),
        (arguments.bincreate, ['bincreate']),
        (arguments.binempty, ['binempty']),
        (arguments.binpath, ['binpath']),
        (arguments.restore, ['restore']),
        (not arguments.restore, ['remove'])
    ]

    for condition in conditions:
        if condition[0]:
            if type(condition[0]) != bool:
                options.update({'path': condition[0]})
            options['mods'] += condition[1]
            break

    return options


def add_optional_arguments(arguments_parser):
    """Add Optional Arguments Function

    Function added optional(they are not nessesarry and do not steak
    to location, ex: --help, --path="./../path_to_file/..").
    To parse optional arguments, arguments_parser should 
    be supplied with optional arguments description.

    Attributes:
        arguments_parser: tool, that parse arguments. 

    """
    for argument in ARGS_CONFIG:
        arguments_parser.add_argument(
            argument['shortcut'],
            argument['name'],
            action=argument['action'],
            help=argument['help']
        )


def add_positional_arguments(arguments_parser):
    """Add Optional Arguments Function

        Function added positional(they are steak
        to location, ex: './folder*/file*.*').
        To parse optional arguments, arguments_parser should
        be supplied with optional arguments description.

        Attributes:
            arguments_parser: tool, that parse arguments. 

        """
    arguments_parser.add_argument('paths', type=str, nargs='*')

